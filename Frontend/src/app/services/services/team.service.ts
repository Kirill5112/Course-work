/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addTeamUser } from '../fn/team/add-team-user';
import { AddTeamUser$Params } from '../fn/team/add-team-user';
import { createTeam } from '../fn/team/create-team';
import { CreateTeam$Params } from '../fn/team/create-team';
import { deleteTeam } from '../fn/team/delete-team';
import { DeleteTeam$Params } from '../fn/team/delete-team';
import { deleteTeamUser } from '../fn/team/delete-team-user';
import { DeleteTeamUser$Params } from '../fn/team/delete-team-user';
import { getProjectTeams } from '../fn/team/get-project-teams';
import { GetProjectTeams$Params } from '../fn/team/get-project-teams';
import { getTeam } from '../fn/team/get-team';
import { GetTeam$Params } from '../fn/team/get-team';
import { getTeamUsers } from '../fn/team/get-team-users';
import { GetTeamUsers$Params } from '../fn/team/get-team-users';
import { TeamDto } from '../models/team-dto';
import { updateTeam } from '../fn/team/update-team';
import { UpdateTeam$Params } from '../fn/team/update-team';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class TeamService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTeam()` */
  static readonly UpdateTeamPath = '/api/teams/{projectId}/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTeam()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTeam$Response(params: UpdateTeam$Params, context?: HttpContext): Observable<StrictHttpResponse<TeamDto>> {
    return updateTeam(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTeam$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTeam(params: UpdateTeam$Params, context?: HttpContext): Observable<TeamDto> {
    return this.updateTeam$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeamDto>): TeamDto => r.body)
    );
  }

  /** Path part for operation `addTeamUser()` */
  static readonly AddTeamUserPath = '/api/teams/{teamId}/users/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addTeamUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  addTeamUser$Response(params: AddTeamUser$Params, context?: HttpContext): Observable<StrictHttpResponse<TeamDto>> {
    return addTeamUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addTeamUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addTeamUser(params: AddTeamUser$Params, context?: HttpContext): Observable<TeamDto> {
    return this.addTeamUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeamDto>): TeamDto => r.body)
    );
  }

  /** Path part for operation `deleteTeamUser()` */
  static readonly DeleteTeamUserPath = '/api/teams/{teamId}/users/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTeamUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTeamUser$Response(params: DeleteTeamUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTeamUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTeamUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTeamUser(params: DeleteTeamUser$Params, context?: HttpContext): Observable<void> {
    return this.deleteTeamUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getProjectTeams()` */
  static readonly GetProjectTeamsPath = '/api/teams/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectTeams()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectTeams$Response(params: GetProjectTeams$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TeamDto>>> {
    return getProjectTeams(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectTeams$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectTeams(params: GetProjectTeams$Params, context?: HttpContext): Observable<Array<TeamDto>> {
    return this.getProjectTeams$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TeamDto>>): Array<TeamDto> => r.body)
    );
  }

  /** Path part for operation `createTeam()` */
  static readonly CreateTeamPath = '/api/teams/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTeam()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTeam$Response(params: CreateTeam$Params, context?: HttpContext): Observable<StrictHttpResponse<TeamDto>> {
    return createTeam(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTeam$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTeam(params: CreateTeam$Params, context?: HttpContext): Observable<TeamDto> {
    return this.createTeam$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeamDto>): TeamDto => r.body)
    );
  }

  /** Path part for operation `getTeamUsers()` */
  static readonly GetTeamUsersPath = '/api/teams/{teamId}/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTeamUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamUsers$Response(params: GetTeamUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getTeamUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTeamUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamUsers(params: GetTeamUsers$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getTeamUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getTeam()` */
  static readonly GetTeamPath = '/api/teams/{projectId}/{teamId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTeam()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeam$Response(params: GetTeam$Params, context?: HttpContext): Observable<StrictHttpResponse<TeamDto>> {
    return getTeam(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTeam$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeam(params: GetTeam$Params, context?: HttpContext): Observable<TeamDto> {
    return this.getTeam$Response(params, context).pipe(
      map((r: StrictHttpResponse<TeamDto>): TeamDto => r.body)
    );
  }

  /** Path part for operation `deleteTeam()` */
  static readonly DeleteTeamPath = '/api/teams/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTeam()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTeam$Response(params: DeleteTeam$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTeam(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTeam$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTeam(params: DeleteTeam$Params, context?: HttpContext): Observable<void> {
    return this.deleteTeam$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
