/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteUser } from '../fn/user/delete-user';
import { DeleteUser$Params } from '../fn/user/delete-user';
import { findByProjectId } from '../fn/user/find-by-project-id';
import { FindByProjectId$Params } from '../fn/user/find-by-project-id';
import { findBySearch } from '../fn/user/find-by-search';
import { FindBySearch$Params } from '../fn/user/find-by-search';
import { getUser } from '../fn/user/get-user';
import { GetUser$Params } from '../fn/user/get-user';
import { getUserByName } from '../fn/user/get-user-by-name';
import { GetUserByName$Params } from '../fn/user/get-user-by-name';
import { getUserTeams } from '../fn/user/get-user-teams';
import { GetUserTeams$Params } from '../fn/user/get-user-teams';
import { TeamDto } from '../models/team-dto';
import { toggleEnabled } from '../fn/user/toggle-enabled';
import { ToggleEnabled$Params } from '../fn/user/toggle-enabled';
import { updateUser } from '../fn/user/update-user';
import { UpdateUser$Params } from '../fn/user/update-user';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getUser()` */
  static readonly GetUserPath = '/api/users/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUser$Response(params: GetUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return getUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUser(params: GetUser$Params, context?: HttpContext): Observable<UserDto> {
    return this.getUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `updateUser()` */
  static readonly UpdateUserPath = '/api/users/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser$Response(params: UpdateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return updateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser(params: UpdateUser$Params, context?: HttpContext): Observable<UserDto> {
    return this.updateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `deleteUser()` */
  static readonly DeleteUserPath = '/api/users/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser$Response(params: DeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser(params: DeleteUser$Params, context?: HttpContext): Observable<void> {
    return this.deleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `toggleEnabled()` */
  static readonly ToggleEnabledPath = '/api/users/{userId}/toggleEnabled';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `toggleEnabled()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggleEnabled$Response(params: ToggleEnabled$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return toggleEnabled(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `toggleEnabled$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggleEnabled(params: ToggleEnabled$Params, context?: HttpContext): Observable<string> {
    return this.toggleEnabled$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getUserByName()` */
  static readonly GetUserByNamePath = '/api/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserByName()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByName$Response(params: GetUserByName$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return getUserByName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserByName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByName(params: GetUserByName$Params, context?: HttpContext): Observable<UserDto> {
    return this.getUserByName$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getUserTeams()` */
  static readonly GetUserTeamsPath = '/api/users/{userId}/teams';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserTeams()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserTeams$Response(params: GetUserTeams$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TeamDto>>> {
    return getUserTeams(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserTeams$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserTeams(params: GetUserTeams$Params, context?: HttpContext): Observable<Array<TeamDto>> {
    return this.getUserTeams$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TeamDto>>): Array<TeamDto> => r.body)
    );
  }

  /** Path part for operation `findBySearch()` */
  static readonly FindBySearchPath = '/api/users/find';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findBySearch()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBySearch$Response(params: FindBySearch$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return findBySearch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findBySearch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBySearch(params: FindBySearch$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.findBySearch$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `findByProjectId()` */
  static readonly FindByProjectIdPath = '/api/users/find/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByProjectId()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByProjectId$Response(params: FindByProjectId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return findByProjectId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByProjectId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByProjectId(params: FindByProjectId$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.findByProjectId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

}
