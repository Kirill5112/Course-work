/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTask } from '../fn/task/create-task';
import { CreateTask$Params } from '../fn/task/create-task';
import { deleteCompletedTasks } from '../fn/task/delete-completed-tasks';
import { DeleteCompletedTasks$Params } from '../fn/task/delete-completed-tasks';
import { deleteTask } from '../fn/task/delete-task';
import { DeleteTask$Params } from '../fn/task/delete-task';
import { getProjectTaskByBothId } from '../fn/task/get-project-task-by-both-id';
import { GetProjectTaskByBothId$Params } from '../fn/task/get-project-task-by-both-id';
import { getProjectTasks } from '../fn/task/get-project-tasks';
import { GetProjectTasks$Params } from '../fn/task/get-project-tasks';
import { TaskDto } from '../models/task-dto';
import { updateTask } from '../fn/task/update-task';
import { UpdateTask$Params } from '../fn/task/update-task';

@Injectable({ providedIn: 'root' })
export class TaskService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getProjectTaskByBothId()` */
  static readonly GetProjectTaskByBothIdPath = '/api/projects/{projectId}/tasks/{taskId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectTaskByBothId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectTaskByBothId$Response(params: GetProjectTaskByBothId$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return getProjectTaskByBothId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectTaskByBothId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectTaskByBothId(params: GetProjectTaskByBothId$Params, context?: HttpContext): Observable<TaskDto> {
    return this.getProjectTaskByBothId$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `updateTask()` */
  static readonly UpdateTaskPath = '/api/projects/{projectId}/tasks/{taskId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask$Response(params: UpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return updateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask(params: UpdateTask$Params, context?: HttpContext): Observable<TaskDto> {
    return this.updateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `deleteTask()` */
  static readonly DeleteTaskPath = '/api/projects/{projectId}/tasks/{taskId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask$Response(params: DeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask(params: DeleteTask$Params, context?: HttpContext): Observable<void> {
    return this.deleteTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getProjectTasks()` */
  static readonly GetProjectTasksPath = '/api/projects/{projectId}/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProjectTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectTasks$Response(params: GetProjectTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskDto>>> {
    return getProjectTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProjectTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProjectTasks(params: GetProjectTasks$Params, context?: HttpContext): Observable<Array<TaskDto>> {
    return this.getProjectTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskDto>>): Array<TaskDto> => r.body)
    );
  }

  /** Path part for operation `createTask()` */
  static readonly CreateTaskPath = '/api/projects/{projectId}/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask$Response(params: CreateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return createTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask(params: CreateTask$Params, context?: HttpContext): Observable<TaskDto> {
    return this.createTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `deleteCompletedTasks()` */
  static readonly DeleteCompletedTasksPath = '/api/projects/{projectId}/tasks/completed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCompletedTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCompletedTasks$Response(params: DeleteCompletedTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCompletedTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCompletedTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCompletedTasks(params: DeleteCompletedTasks$Params, context?: HttpContext): Observable<void> {
    return this.deleteCompletedTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
